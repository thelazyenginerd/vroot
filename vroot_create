#!/bin/bash

. $(dirname $0)/vroot_common

ARCHIVE_UBUNTU=http://archive.ubuntu.com/ubuntu
ARCHIVE_DEBIAN=http://ftp.us.debian.org/debian

################################################################################
# shows the help page
################################################################################
function usage()
{
    echo "
${base} [options] <vroot_name>

    -h|--help       prints this page
    -a|--arch       architecture, i386 or amd64 [default: ${VROOT_DEFAULT_ARCHITECTURE}]
    -d|--distro     distribution, Ubuntu or Debian [default: ${VROOT_DEFAULT_DISTRIBUTION}]
    -c|--codename   codename of the version [default: ${VROOT_DEFAULT_CODENAME}]
"
    exit 255
}

################################################################################
# installs the debootstrap utility that we will use to bootstrap
################################################################################
function install_prerequisites()
{
    local packages="debootstrap sudo"
    sudo -- apt-get update --assume-yes
    sudo -- apt-get install --assume-yes ${packages} || true
}

################################################################################
# install the files that the chroot would need for you to use it.
################################################################################
function install_files()
{
    local vroot_directory=$1
    for file in /etc/passwd /etc/shadow /etc/group /etc/sudoers /etc/hosts; do
        sudo -- cp -f ${file} ${vroot_directory}/etc
    done
}

################################################################################
# run a commant in a chroot
################################################################################
function chroot_run()
{
    local vroot_directory=$1; shift
    sudo -- chroot ${vroot_directory} $@
}

################################################################################
# install a package into a chroot
################################################################################
function chroot_apt_get()
{
    local vroot_directory=$1; shift
    chroot_run ${vroot_directory} /usr/bin/apt-get --assume-yes $@
}

################################################################################
# create the directory where the vroot will live
################################################################################
function make_vroot_directory()
{
    local vroot_directory=$1
    if [ -e ${vroot_directory} ]; then
        echo "vroot already exists: ${vroot_directory}"
        exit 4
    fi
    mkdir -p ${vroot_directory}
}

################################################################################
# now run the bootstrap to install the packages
################################################################################
function bootstrap_chroot()
{
    local architecture=$1
    local codename=$2
    local vroot_directory=$3
    local archive=$4
    local debootstrap_script=$5
    sudo -- debootstrap --arch ${architecture} ${codename} ${vroot_directory} ${archive} ${debootstrap_script}
}

################################################################################
# install extra packages
################################################################################
function install_packages()
{
    local vroot_directory=$1; shift
    chroot_apt_get ${vroot_directory} update
    chroot_apt_get ${vroot_directory} install $@
}

################################################################################
# gets called on error to clean up any artifacts
################################################################################
function cleanup_error()
{
    local vroot_directory=$1
    sudo -- rm -rf ${vroot_directory}
}

################################################################################
# main
################################################################################
archive=
debootstrap_script=
codename=${VROOT_DEFAULT_CODENAME}
distro=$(vroot_get_linux_distribution)
architecture=${VROOT_DEFAULT_ARCHITECTURE}
if [ "${distro}" = "Debian" ]; then
    archive=${ARCHIVE_DEBIAN}
elif [ "${distro}" = "Ubuntu" ]; then
    archive=${ARCHIVE_UBUNTU}
else
    # we should never get here, if we do, /usr/bin/lsb_release is missing or
    # returning something we don't understand.
    echo "${base}: bad distro specified: ${distro}"
    usage
fi
if [ "${architecture}" != "amd64" ] && [ "${architecture}" != "i386" ]; then
    echo "${base}: bad architecture specified: ${architecture}"
    usage
fi

# options may be followed by one colon to indicate they have a required argument
if ! options=$(getopt -o hd:a:c: -l help,distro:,arch:,codename: -- "$@")
then
    # something went wrong, getopt will put out an error message for us
    exit 1
fi
eval set -- ${options}
while [ $# -gt 0 ]; do
    case $1 in
        -h|--help)
            usage;;
        -a|--arch)
            arch="$2"
            shift;;
        -c|--codename)
            codename="$2"
            shift;;
        -d|--distro)
            distro="$2"
            shift;;
        --)
            shift
            break
            ;;
        -*)
            echo "${base}: unrecognized option $1" 1>&2; exit 2;;
    esac
    shift
done

vroot=$1
[ -z "${vroot}" ] && usage
if [ "${distro}" = "Ubuntu" ]; then
    archive=${ARCHIVE_UBUNTU}
    debootstrap_script=/usr/share/debootstrap/scripts/gutsy
elif [ "${distro}" = "Debian" ]; then
    archive=${ARCHIVE_DEBIAN}
    debootstrap_script=/usr/share/debootstrap/scripts/sid
else
    echo "${base}: unknown distro: ${distro}"
    usage
fi

echo "arch: ${architecture}
distro: ${distro}
codename: ${codename}
vroot: ${vroot}
"

install_prerequisites
vroot_directory=$(vroot_get_directory ${vroot})
make_vroot_directory ${vroot_directory}
trap 'cleanup_error' INT TERM ERR
bootstrap_chroot ${architecture} ${codename} ${vroot_directory} ${archive} ${debootstrap_script}
install_files ${vroot_directory}
install_packages ${vroot_directory} sudo

echo "Done!  Run \"vroot ${vroot}\" to get into the vroot."
